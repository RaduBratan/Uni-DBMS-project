Exercițiul 4:
CREATE TABLE JOC (
  ID_JOC NUMBER PRIMARY KEY,
  NUME VARCHAR2(100),
  PRET NUMBER,
  CATEGORIE_VARSTA NUMBER,
  NOTA_CRITICI NUMBER,
  DATA_LANSARE DATE
);

CREATE TABLE EMULATOR (
  ID_EMULATOR NUMBER PRIMARY KEY,
  NUME VARCHAR2(100),
  NUMAR_DESCARCARI NUMBER,
  DATA_LANSARE DATE
);

CREATE TABLE CONSOLA (
  ID_CONSOLA NUMBER PRIMARY KEY,
  NUME VARCHAR2(100),
  PRET NUMBER,
  NUMAR_VANZARI NUMBER,
  DATA_LANSARE DATE
);

CREATE TABLE COMPANIE_JOC (
  ID_COMPANIE_JOC NUMBER PRIMARY KEY,
  NUME VARCHAR2(100),
  NUMAR_ANGAJATI NUMBER,
  TARA_ORIGINE VARCHAR2(100)
);

CREATE TABLE COMPANIE_CONSOLA (
  ID_COMPANIE_CONSOLA NUMBER PRIMARY KEY,
  NUME VARCHAR2(100),
  NUMAR_ANGAJATI NUMBER,
  TARA_ORIGINE VARCHAR2(100)
);

CREATE TABLE DEZVOLTATOR_EMULATOR (
  ID_DEZVOLTATOR_EMULATOR NUMBER PRIMARY KEY,
  NUME VARCHAR2(100),
  PRENUME VARCHAR2(100),
  EMAIL VARCHAR2(100),
  NUMAR_PERSOANE NUMBER,
  TARA_ORIGINE VARCHAR2(100)
);

CREATE TABLE RULEAZA (
  ID NUMBER PRIMARY KEY,
  ID_JOC NUMBER,
  ID_CONSOLA NUMBER,
  CONSTRAINT FK_JOC_RUL FOREIGN KEY (ID_JOC) REFERENCES JOC (ID_JOC),
  CONSTRAINT FK_CONS_RUL FOREIGN KEY (ID_CONSOLA) REFERENCES CONSOLA (ID_CONSOLA)
  CONSTRAINT UNIQUE_CONS_RUL UNIQUE (ID_JOC, ID_CONSOLA)
);

CREATE TABLE INTERPRETEAZA (
  ID NUMBER PRIMARY KEY,
  ID_JOC NUMBER,
  ID_EMULATOR NUMBER,
  CONSTRAINT FK_JOC_INTERP FOREIGN KEY (ID_JOC) REFERENCES JOC (ID_JOC),
  CONSTRAINT FK_EMU_INTERP FOREIGN KEY (ID_EMULATOR) REFERENCES EMULATOR (ID_EMULATOR)
  CONSTRAINT UNIQUE_CONS_INT UNIQUE (ID_JOC, ID_EMULATOR)
);

CREATE TABLE IMITA (
  ID NUMBER PRIMARY KEY,
  ID_EMULATOR NUMBER,
  ID_CONSOLA NUMBER,
  CONSTRAINT FK_EMULATOR_IMITA FOREIGN KEY (ID_EMULATOR) REFERENCES EMULATOR (ID_EMULATOR),
  CONSTRAINT FK_CONSOLA_IMITA FOREIGN KEY (ID_CONSOLA) REFERENCES CONSOLA (ID_CONSOLA)
);

CREATE TABLE DETINE (
  ID NUMBER PRIMARY KEY,
  ID_COMPANIE_CONSOLA NUMBER,
  ID_COMPANIE_JOC NUMBER,
  CONSTRAINT FK_COMP_CON_DETINE FOREIGN KEY (ID_COMPANIE_CONSOLA) REFERENCES COMPANIE_CONSOLA (ID_COMPANIE_CONSOLA),
  CONSTRAINT FK_COMP_JOC_DETINE FOREIGN KEY (ID_COMPANIE_JOC) REFERENCES COMPANIE_JOC (ID_COMPANIE_JOC)
  CONSTRAINT UNIQUE_CONS_DET UNIQUE (ID_COMPANIE_JOC)
);

CREATE TABLE CONSTRUIESTE (
  ID NUMBER PRIMARY KEY,
  ID_COMPANIE_CONSOLA NUMBER,
  ID_CONSOLA NUMBER,
  CONSTRAINT FK_COMP_CON_CONST FOREIGN KEY (ID_COMPANIE_CONSOLA) REFERENCES COMPANIE_CONSOLA (ID_COMPANIE_CONSOLA),
  CONSTRAINT FK_CON_CONST FOREIGN KEY (ID_CONSOLA) REFERENCES CONSOLA (ID_CONSOLA)
  CONSTRAINT UNIQUE_CONS_CON UNIQUE (ID_CONSOLA)
);

CREATE TABLE DEZVOLTA (
  ID NUMBER PRIMARY KEY,
  ID_COMPANIE_JOC NUMBER,
  ID_JOC NUMBER,
  CONSTRAINT FK_COMP_JOC_DEZV FOREIGN KEY (ID_COMPANIE_JOC) REFERENCES COMPANIE_JOC (ID_COMPANIE_JOC),
  CONSTRAINT FK_JOC_DEZV FOREIGN KEY (ID_JOC) REFERENCES JOC (ID_JOC)
  CONSTRAINT UNIQUE_CONS_DEZ UNIQUE (ID_JOC)
);

CREATE TABLE PROGRAMEAZA (
  ID NUMBER PRIMARY KEY,
  ID_DEZVOLTATOR_EMULATOR NUMBER,
  ID_EMULATOR NUMBER,
  CONSTRAINT FK_DEZVT_EMU_PROG FOREIGN KEY (ID_DEZVOLTATOR_EMULATOR) REFERENCES DEZVOLTATOR_EMULATOR (ID_DEZVOLTATOR_EMULATOR),
  CONSTRAINT FK_EMU_PROG FOREIGN KEY (ID_EMULATOR) REFERENCES EMULATOR (ID_EMULATOR)
  CONSTRAINT UNIQUE_CONS_PRO UNIQUE (ID_DEZVOLTATOR_EMULATOR, ID_EMULATOR)
);

-- -- --

Exercițiul 5:
INSERT INTO JOC (ID_JOC, NUME, PRET, CATEGORIE_VARSTA, NOTA_CRITICI, DATA_LANSARE)
VALUES (1, 'GTA San Andreas', 20.01, 18, 8.5, DATE '2008-01-01');
INSERT INTO JOC (ID_JOC, NUME, PRET, CATEGORIE_VARSTA, NOTA_CRITICI, DATA_LANSARE)
VALUES (2, 'MGS 3', 49.99, 16, 9.5, DATE '2004-01-01');
INSERT INTO JOC (ID_JOC, NUME, PRET, CATEGORIE_VARSTA, NOTA_CRITICI, DATA_LANSARE)
VALUES (3, 'Call of Duty Black Ops', 35.76, 17, 7.8, DATE '2012-01-01');
INSERT INTO JOC (ID_JOC, NUME, PRET, CATEGORIE_VARSTA, NOTA_CRITICI, DATA_LANSARE)
VALUES (4, 'FIFA 9', 1.00, 13, 6.0, DATE '2009-01-01');
INSERT INTO JOC (ID_JOC, NUME, PRET, CATEGORIE_VARSTA, NOTA_CRITICI, DATA_LANSARE)
VALUES (5, 'Super Mario', 200.50, 4, 9.9, DATE '1990-01-01');
INSERT INTO JOC (ID_JOC, NUME, PRET, CATEGORIE_VARSTA, NOTA_CRITICI, DATA_LANSARE)
VALUES (6, 'Super Mario 2', 200.50, 4, 9.9, DATE '1990-01-01');
INSERT INTO JOC (ID_JOC, NUME, PRET, CATEGORIE_VARSTA, NOTA_CRITICI, DATA_LANSARE)
VALUES (7, 'Super Mario 3', 200.50, 4, 9.9, DATE '1990-01-01');
INSERT INTO JOC (ID_JOC, NUME, PRET, CATEGORIE_VARSTA, NOTA_CRITICI, DATA_LANSARE)
VALUES (8, 'Super Mario 4', 200.50, 4, 9.9, DATE '1990-01-01');
INSERT INTO JOC (ID_JOC, NUME, PRET, CATEGORIE_VARSTA, NOTA_CRITICI, DATA_LANSARE)
VALUES (9, 'Super Mario 5', 200.50, 4, 9.9, DATE '1990-01-01');
INSERT INTO JOC (ID_JOC, NUME, PRET, CATEGORIE_VARSTA, NOTA_CRITICI, DATA_LANSARE)
VALUES (10, 'Super Mario 6', 200.50, 4, 9.9, DATE '1990-01-01');

INSERT INTO EMULATOR (ID_EMULATOR, NUME, NUMAR_DESCARCARI, DATA_LANSARE)
VALUES (1, 'mGBA', 999999, DATE '2012-01-01');
INSERT INTO EMULATOR (ID_EMULATOR, NUME, NUMAR_DESCARCARI, DATA_LANSARE)
VALUES (2, 'Mupen', 100000, DATE '2015-01-01');
INSERT INTO EMULATOR (ID_EMULATOR, NUME, NUMAR_DESCARCARI, DATA_LANSARE)
VALUES (3, 'PCSX2', 200000, DATE '2014-01-01');
INSERT INTO EMULATOR (ID_EMULATOR, NUME, NUMAR_DESCARCARI, DATA_LANSARE)
VALUES (4, 'Wonder', 10000, DATE '2019-01-01');
INSERT INTO EMULATOR (ID_EMULATOR, NUME, NUMAR_DESCARCARI, DATA_LANSARE)
VALUES (5, 'Lynx', 77777, DATE '2016-01-01');
INSERT INTO EMULATOR (ID_EMULATOR, NUME, NUMAR_DESCARCARI, DATA_LANSARE)
VALUES (6, 'PPSSPP', 999999, DATE '2012-01-01');
INSERT INTO EMULATOR (ID_EMULATOR, NUME, NUMAR_DESCARCARI, DATA_LANSARE)
VALUES (7, 'Snake', 100000, DATE '2015-01-01');
INSERT INTO EMULATOR (ID_EMULATOR, NUME, NUMAR_DESCARCARI, DATA_LANSARE)
VALUES (8, 'Skyline', 200000, DATE '2014-01-01');
INSERT INTO EMULATOR (ID_EMULATOR, NUME, NUMAR_DESCARCARI, DATA_LANSARE)
VALUES (9, 'RPCS3', 10000, DATE '2019-01-01');
INSERT INTO EMULATOR (ID_EMULATOR, NUME, NUMAR_DESCARCARI, DATA_LANSARE)
VALUES (10, 'DuckStation', 77777, DATE '2016-01-01');

INSERT INTO CONSOLA (ID_CONSOLA, NUME, PRET, NUMAR_VANZARI, DATA_LANSARE)
VALUES (1, 'GameBoy Advance', 199.99, 100000, DATE '2002-01-01');
INSERT INTO CONSOLA (ID_CONSOLA, NUME, PRET, NUMAR_VANZARI, DATA_LANSARE)
VALUES (2, 'PlayStation 2', 299.00, 7000000000, DATE '2003-01-01');
INSERT INTO CONSOLA (ID_CONSOLA, NUME, PRET, NUMAR_VANZARI, DATA_LANSARE)
VALUES (3, ' Game Gear', 499.99, 500000, DATE '2005-01-01');
INSERT INTO CONSOLA (ID_CONSOLA, NUME, PRET, NUMAR_VANZARI, DATA_LANSARE)
VALUES (4, ' Wonderswan', 500.00, 30000, DATE '2004-01-01');
INSERT INTO CONSOLA (ID_CONSOLA, NUME, PRET, NUMAR_VANZARI, DATA_LANSARE)
VALUES (5, '2700', 999.00, 2000000, DATE '1980-01-01');
INSERT INTO CONSOLA (ID_CONSOLA, NUME, PRET, NUMAR_VANZARI, DATA_LANSARE)
VALUES (6, 'PSP', 199.99, 100000, DATE '2002-01-01');
INSERT INTO CONSOLA (ID_CONSOLA, NUME, PRET, NUMAR_VANZARI, DATA_LANSARE)
VALUES (7, 'PlayStation', 299.00, 7000000000, DATE '2003-01-01');
INSERT INTO CONSOLA (ID_CONSOLA, NUME, PRET, NUMAR_VANZARI, DATA_LANSARE)
VALUES (8, ' PlayStation 3', 499.99, 500000, DATE '2005-01-01');
INSERT INTO CONSOLA (ID_CONSOLA, NUME, PRET, NUMAR_VANZARI, DATA_LANSARE)
VALUES (9, ' Switch', 500.00, 30000, DATE '2004-01-01');
INSERT INTO CONSOLA (ID_CONSOLA, NUME, PRET, NUMAR_VANZARI, DATA_LANSARE)
VALUES (10, '3DS', 999.00, 2000000, DATE '1980-01-01');

INSERT INTO COMPANIE_JOC (ID_COMPANIE_JOC, NUME, NUMAR_ANGAJATI, TARA_ORIGINE)
VALUES (1, 'Rockstar', 1000, 'SUA');
INSERT INTO COMPANIE_JOC (ID_COMPANIE_JOC, NUME, NUMAR_ANGAJATI, TARA_ORIGINE)
VALUES (2, 'Nintendo', 10000, 'Japonia');
INSERT INTO COMPANIE_JOC (ID_COMPANIE_JOC, NUME, NUMAR_ANGAJATI, TARA_ORIGINE)
VALUES (3, 'Electronic Arts', 5000, 'SUA');
INSERT INTO COMPANIE_JOC (ID_COMPANIE_JOC, NUME, NUMAR_ANGAJATI, TARA_ORIGINE)
VALUES (4, 'Konami', 2500, 'Japonia');
INSERT INTO COMPANIE_JOC (ID_COMPANIE_JOC, NUME, NUMAR_ANGAJATI, TARA_ORIGINE)
VALUES (5, 'Activision', 2000, 'SUA');
INSERT INTO COMPANIE_JOC (ID_COMPANIE_JOC, NUME, NUMAR_ANGAJATI, TARA_ORIGINE)
VALUES (6, 'Test1', 2000, 'SUA');
INSERT INTO COMPANIE_JOC (ID_COMPANIE_JOC, NUME, NUMAR_ANGAJATI, TARA_ORIGINE)
VALUES (7, 'Test2', 2000, 'SUA');
INSERT INTO COMPANIE_JOC (ID_COMPANIE_JOC, NUME, NUMAR_ANGAJATI, TARA_ORIGINE)
VALUES (8, 'Test3', 2000, 'SUA');
INSERT INTO COMPANIE_JOC (ID_COMPANIE_JOC, NUME, NUMAR_ANGAJATI, TARA_ORIGINE)
VALUES (9, 'Test4', 2000, 'SUA');
INSERT INTO COMPANIE_JOC (ID_COMPANIE_JOC, NUME, NUMAR_ANGAJATI, TARA_ORIGINE)
VALUES (10, 'Test5', 2000, 'SUA');

INSERT INTO COMPANIE_CONSOLA (ID_COMPANIE_CONSOLA, NUME, NUMAR_ANGAJATI, TARA_ORIGINE)
VALUES (1, 'Nintendo', 1000, 'Japonia');
INSERT INTO COMPANIE_CONSOLA (ID_COMPANIE_CONSOLA, NUME, NUMAR_ANGAJATI, TARA_ORIGINE)
VALUES (2, 'Sega', 500, 'Japonia');
INSERT INTO COMPANIE_CONSOLA (ID_COMPANIE_CONSOLA, NUME, NUMAR_ANGAJATI, TARA_ORIGINE)
VALUES (3, 'Sony', 2000, 'Japonia');
INSERT INTO COMPANIE_CONSOLA (ID_COMPANIE_CONSOLA, NUME, NUMAR_ANGAJATI, TARA_ORIGINE)
VALUES (4, 'NEC', 0, 'Japonia');
INSERT INTO COMPANIE_CONSOLA (ID_COMPANIE_CONSOLA, NUME, NUMAR_ANGAJATI, TARA_ORIGINE)
VALUES (5, 'Atari', 1, 'SUA');
INSERT INTO COMPANIE_CONSOLA (ID_COMPANIE_CONSOLA, NUME, NUMAR_ANGAJATI, TARA_ORIGINE)
VALUES (6, 'Test1', 2000, 'SUA');
INSERT INTO COMPANIE_CONSOLA (ID_COMPANIE_CONSOLA, NUME, NUMAR_ANGAJATI, TARA_ORIGINE)
VALUES (7, 'Test2', 2000, 'SUA');
INSERT INTO COMPANIE_CONSOLA (ID_COMPANIE_CONSOLA, NUME, NUMAR_ANGAJATI, TARA_ORIGINE)
VALUES (8, 'Test3', 2000, 'SUA');
INSERT INTO COMPANIE_CONSOLA (ID_COMPANIE_CONSOLA, NUME, NUMAR_ANGAJATI, TARA_ORIGINE)
VALUES (9, 'Test4', 2000, 'SUA');
INSERT INTO COMPANIE_CONSOLA (ID_COMPANIE_CONSOLA, NUME, NUMAR_ANGAJATI, TARA_ORIGINE)
VALUES (10, 'Test5', 2000, 'SUA');

INSERT INTO DEZVOLTATOR_EMULATOR (ID_DEZVOLTATOR_EMULATOR, NUME, PRENUME, EMAIL, NUMAR_PERSOANE, TARA_ORIGINE)
VALUES (1, ' Bratan', ' Radu ', 'radu@exemplu.com', 1, 'Romania');
INSERT INTO DEZVOLTATOR_EMULATOR (ID_DEZVOLTATOR_EMULATOR, NUME, PRENUME, EMAIL, NUMAR_PERSOANE, TARA_ORIGINE)
VALUES (2, 'Smith', 'Jack', 'smith@exemplu.com', 1, 'SUA');
INSERT INTO DEZVOLTATOR_EMULATOR (ID_DEZVOLTATOR_EMULATOR, NUME, PRENUME, EMAIL, NUMAR_PERSOANE, TARA_ORIGINE)
VALUES (3, 'Epic Team Number 1', '', 'team1@exemplu.com', 3, 'Polonia');
INSERT INTO DEZVOLTATOR_EMULATOR (ID_DEZVOLTATOR_EMULATOR, NUME, PRENUME, EMAIL, NUMAR_PERSOANE, TARA_ORIGINE)
VALUES (4, 'Jackson', 'Michael', 'jack@exemplu.com', 1, 'Franta');
INSERT INTO DEZVOLTATOR_EMULATOR (ID_DEZVOLTATOR_EMULATOR, NUME, PRENUME, EMAIL, NUMAR_PERSOANE, TARA_ORIGINE)
VALUES (5, 'The Emulator Developers', '', 'the.devs@exemplu.com', 14, 'Japonia');
INSERT INTO DEZVOLTATOR_EMULATOR (ID_DEZVOLTATOR_EMULATOR, NUME, PRENUME, EMAIL, NUMAR_PERSOANE, TARA_ORIGINE)
VALUES (6, ' Bratan2', ' Radu ', 'radu@exemplu.com', 1, 'Romania');
INSERT INTO DEZVOLTATOR_EMULATOR (ID_DEZVOLTATOR_EMULATOR, NUME, PRENUME, EMAIL, NUMAR_PERSOANE, TARA_ORIGINE)
VALUES (7, 'Smith2', 'Jack', 'smith@exemplu.com', 1, 'SUA');
INSERT INTO DEZVOLTATOR_EMULATOR (ID_DEZVOLTATOR_EMULATOR, NUME, PRENUME, EMAIL, NUMAR_PERSOANE, TARA_ORIGINE)
VALUES (8, 'Epic Team Number 2', '', 'team1@exemplu.com', 3, 'Polonia');
INSERT INTO DEZVOLTATOR_EMULATOR (ID_DEZVOLTATOR_EMULATOR, NUME, PRENUME, EMAIL, NUMAR_PERSOANE, TARA_ORIGINE)
VALUES (9, 'Jackson2', 'Michael', 'jack@exemplu.com', 1, 'Franta');
INSERT INTO DEZVOLTATOR_EMULATOR (ID_DEZVOLTATOR_EMULATOR, NUME, PRENUME, EMAIL, NUMAR_PERSOANE, TARA_ORIGINE)
VALUES (10, 'The Emulator Developers 2', '', 'the.devs@exemplu.com', 14, 'Japonia');

INSERT INTO RULEAZA (ID, ID_JOC, ID_CONSOLA)
VALUES (1, 1, 1);
INSERT INTO RULEAZA (ID, ID_JOC, ID_CONSOLA)
VALUES (2, 2, 2);
INSERT INTO RULEAZA (ID, ID_JOC, ID_CONSOLA)
VALUES (3, 3, 3);
INSERT INTO RULEAZA (ID, ID_JOC, ID_CONSOLA)
VALUES (4, 4, 4);
INSERT INTO RULEAZA (ID, ID_JOC, ID_CONSOLA)
VALUES (5, 5, 5);
INSERT INTO RULEAZA (ID, ID_JOC, ID_CONSOLA)
VALUES (6, 1, 2);
INSERT INTO RULEAZA (ID, ID_JOC, ID_CONSOLA)
VALUES (7, 2, 3);
INSERT INTO RULEAZA (ID, ID_JOC, ID_CONSOLA)
VALUES (8, 3, 4);
INSERT INTO RULEAZA (ID, ID_JOC, ID_CONSOLA)
VALUES (9, 4, 5);
INSERT INTO RULEAZA (ID, ID_JOC, ID_CONSOLA)
VALUES (10, 5, 1);

INSERT INTO INTERPRETEAZA (ID, ID_JOC, ID_EMULATOR)
VALUES (1, 1, 1);
INSERT INTO INTERPRETEAZA (ID, ID_JOC, ID_EMULATOR)
VALUES (2, 2, 2);
INSERT INTO INTERPRETEAZA (ID, ID_JOC, ID_EMULATOR)
VALUES (3, 3, 3);
INSERT INTO INTERPRETEAZA (ID, ID_JOC, ID_EMULATOR)
VALUES (4, 4, 4);
INSERT INTO INTERPRETEAZA (ID, ID_JOC, ID_EMULATOR)
VALUES (5, 5, 5);
INSERT INTO INTERPRETEAZA (ID, ID_JOC, ID_EMULATOR)
VALUES (6, 1, 2);
INSERT INTO INTERPRETEAZA (ID, ID_JOC, ID_EMULATOR)
VALUES (7, 2, 3);
INSERT INTO INTERPRETEAZA (ID, ID_JOC, ID_EMULATOR)
VALUES (8, 3, 4);
INSERT INTO INTERPRETEAZA (ID, ID_JOC, ID_EMULATOR)
VALUES (9, 4, 5);
INSERT INTO INTERPRETEAZA (ID, ID_JOC, ID_EMULATOR)
VALUES (10, 5, 1);

INSERT INTO IMITA (ID, ID_EMULATOR, ID_CONSOLA)
VALUES (1, 1, 2);
INSERT INTO IMITA (ID, ID_EMULATOR, ID_CONSOLA)
VALUES (2, 2, 5);
INSERT INTO IMITA (ID, ID_EMULATOR, ID_CONSOLA)
VALUES (3, 3, 1);
INSERT INTO IMITA (ID, ID_EMULATOR, ID_CONSOLA)
VALUES (4, 4, 1);
INSERT INTO IMITA (ID, ID_EMULATOR, ID_CONSOLA)
VALUES (5, 5, 1);
INSERT INTO IMITA (ID, ID_EMULATOR, ID_CONSOLA)
VALUES (6, 6, 3);
INSERT INTO IMITA (ID, ID_EMULATOR, ID_CONSOLA)
VALUES (7, 7, 10);
INSERT INTO IMITA (ID, ID_EMULATOR, ID_CONSOLA)
VALUES (8, 8, 9);
INSERT INTO IMITA (ID, ID_EMULATOR, ID_CONSOLA)
VALUES (9, 9, 6);
INSERT INTO IMITA (ID, ID_EMULATOR, ID_CONSOLA)
VALUES (10, 10, 6);

INSERT INTO DETINE (ID, ID_COMPANIE_CONSOLA, ID_COMPANIE_JOC)
VALUES (1, 1, 1);
INSERT INTO DETINE (ID, ID_COMPANIE_CONSOLA, ID_COMPANIE_JOC)
VALUES (2, 1, 2);
INSERT INTO DETINE (ID, ID_COMPANIE_CONSOLA, ID_COMPANIE_JOC)
VALUES (3, 1, 3);
INSERT INTO DETINE (ID, ID_COMPANIE_CONSOLA, ID_COMPANIE_JOC)
VALUES (4, 1, 4);
INSERT INTO DETINE (ID, ID_COMPANIE_CONSOLA, ID_COMPANIE_JOC)
VALUES (5, 1, 5);
INSERT INTO DETINE (ID, ID_COMPANIE_CONSOLA, ID_COMPANIE_JOC)
VALUES (6, 2, 6);
INSERT INTO DETINE (ID, ID_COMPANIE_CONSOLA, ID_COMPANIE_JOC)
VALUES (7, 2, 7);
INSERT INTO DETINE (ID, ID_COMPANIE_CONSOLA, ID_COMPANIE_JOC)
VALUES (8, 3, 8);
INSERT INTO DETINE (ID, ID_COMPANIE_CONSOLA, ID_COMPANIE_JOC)
VALUES (9, 4, 9);
INSERT INTO DETINE (ID, ID_COMPANIE_CONSOLA, ID_COMPANIE_JOC)
VALUES (10, 5, 10);

INSERT INTO CONSTRUIESTE (ID, ID_COMPANIE_CONSOLA, ID_CONSOLA)
VALUES (1, 1, 1);
INSERT INTO CONSTRUIESTE (ID, ID_COMPANIE_CONSOLA, ID_CONSOLA)
VALUES (2, 1, 2);
INSERT INTO CONSTRUIESTE (ID, ID_COMPANIE_CONSOLA, ID_CONSOLA)
VALUES (3, 1, 3);
INSERT INTO CONSTRUIESTE (ID, ID_COMPANIE_CONSOLA, ID_CONSOLA)
VALUES (4, 1, 4);
INSERT INTO CONSTRUIESTE (ID, ID_COMPANIE_CONSOLA, ID_CONSOLA)
VALUES (5, 2, 5);
INSERT INTO CONSTRUIESTE (ID, ID_COMPANIE_CONSOLA, ID_CONSOLA)
VALUES (6, 3, 6);
INSERT INTO CONSTRUIESTE (ID, ID_COMPANIE_CONSOLA, ID_CONSOLA)
VALUES (7, 4, 7);
INSERT INTO CONSTRUIESTE (ID, ID_COMPANIE_CONSOLA, ID_CONSOLA)
VALUES (8, 4, 8);
INSERT INTO CONSTRUIESTE (ID, ID_COMPANIE_CONSOLA, ID_CONSOLA)
VALUES (9, 5, 9);
INSERT INTO CONSTRUIESTE (ID, ID_COMPANIE_CONSOLA, ID_CONSOLA)
VALUES (10, 8, 10);

INSERT INTO DEZVOLTA (ID, ID_COMPANIE_JOC, ID_JOC)
VALUES (1, 1, 1);
INSERT INTO DEZVOLTA (ID, ID_COMPANIE_JOC, ID_JOC)
VALUES (2, 2, 2);
INSERT INTO DEZVOLTA (ID, ID_COMPANIE_JOC, ID_JOC)
VALUES (3, 2, 3);
INSERT INTO DEZVOLTA (ID, ID_COMPANIE_JOC, ID_JOC)
VALUES (4, 4, 4);
INSERT INTO DEZVOLTA (ID, ID_COMPANIE_JOC, ID_JOC)
VALUES (5, 5, 5);
INSERT INTO DEZVOLTA (ID, ID_COMPANIE_JOC, ID_JOC)
VALUES (6, 5, 6);
INSERT INTO DEZVOLTA (ID, ID_COMPANIE_JOC, ID_JOC)
VALUES (7, 5, 7);
INSERT INTO DEZVOLTA (ID, ID_COMPANIE_JOC, ID_JOC)
VALUES (8, 7, 8);
INSERT INTO DEZVOLTA (ID, ID_COMPANIE_JOC, ID_JOC)
VALUES (9, 8, 9);
INSERT INTO DEZVOLTA (ID, ID_COMPANIE_JOC, ID_JOC)
VALUES (10, 10, 10);

INSERT INTO PROGRAMEAZA (ID, ID_DEZVOLTATOR_EMULATOR, ID_EMULATOR)
VALUES (1, 1, 1);
INSERT INTO PROGRAMEAZA (ID, ID_DEZVOLTATOR_EMULATOR, ID_EMULATOR)
VALUES (2, 2, 2);
INSERT INTO PROGRAMEAZA (ID, ID_DEZVOLTATOR_EMULATOR, ID_EMULATOR)
VALUES (3, 3, 3);
INSERT INTO PROGRAMEAZA (ID, ID_DEZVOLTATOR_EMULATOR, ID_EMULATOR)
VALUES (4, 4, 4);
INSERT INTO PROGRAMEAZA (ID, ID_DEZVOLTATOR_EMULATOR, ID_EMULATOR)
VALUES (5, 5, 5);
INSERT INTO PROGRAMEAZA (ID, ID_DEZVOLTATOR_EMULATOR, ID_EMULATOR)
VALUES (6, 1, 2);
INSERT INTO PROGRAMEAZA (ID, ID_DEZVOLTATOR_EMULATOR, ID_EMULATOR)
VALUES (7, 2, 3);
INSERT INTO PROGRAMEAZA (ID, ID_DEZVOLTATOR_EMULATOR, ID_EMULATOR)
VALUES (8, 3, 4);
INSERT INTO PROGRAMEAZA (ID, ID_DEZVOLTATOR_EMULATOR, ID_EMULATOR)
VALUES (9, 4, 5);
INSERT INTO PROGRAMEAZA (ID, ID_DEZVOLTATOR_EMULATOR, ID_EMULATOR)
VALUES (10, 5, 1);

-- -- --

Exercițiul 6:
Cerință: Obține o listă cu toate jocurile și consolele pe care o companie le deține. Utilizează două tipuri diferite de colecții: un tablou asociativ pentru a stoca jocurile și un tablou de dimensiune variabilă pentru a stoca consolele.
-- declaram tipurile de date
CREATE OR REPLACE PROCEDURE AFISARE_JOCURI_SI_CONSOLE IS
  TYPE T_JOCURI IS
    TABLE OF JOC%INDEX BY BY PLS_INTEGER;
  TYPE T_CONSOLE IS
    VARRAY (100) OF CONSOLA.NUME%TYPE;
  JOCURI                 T_JOCURI;
  CONSOLE                T_CONSOLE := T_CONSOLE ();
  COMPANIE_ID            COMPANIE_JOC.ID_COMPANIE_JOC%TYPE := 10; -- compania cu ID = 10
  COUNT_COMPANIE_CURENTA NUMBER;
  COUNT_COMPANIE_CONSOLA NUMBER;
  COUNT_COMPANIE_JOC     NUMBER;
  COUNT_JOC              NUMBER;
  COUNT_CONSOLA          NUMBER;
  COUNT_DEZVOLTA         NUMBER;
  COUNT_CONSTRUIESTE     NUMBER;
BEGIN
 -- verificam daca tabela COMPANIE_CONSOLA e goala
  SELECT
    COUNT (*) INTO COUNT_COMPANIE_CONSOLA
  FROM
    COMPANIE_CONSOLA;
  IF COUNT_COMPANIE_CONSOLA = 0 THEN
    RAISE_APPLICATION_ERROR (-20001, 'Tabela COMPANIE_CONSOLA e goala.');
  END IF;
 -- verificam daca tabela COMPANIE_JOC e goala
  SELECT
    COUNT (*) INTO COUNT_COMPANIE_JOC
  FROM
    COMPANIE_JOC;
  IF COUNT_COMPANIE_JOC = 0 THEN
    RAISE_APPLICATION_ERROR (-20002, 'Tabela COMPANIE_JOC e goala.');
  END IF;
 -- verificam daca tabela JOC e goala
  SELECT
    COUNT (*) INTO COUNT_JOC
  FROM
    JOC;
  IF COUNT_JOC = 0 THEN
    RAISE_APPLICATION_ERROR (-20003, 'Tabela JOC e goala.');
  END IF;
 -- verificam daca tabela CONSOLA e goala
  SELECT
    COUNT (*) INTO COUNT_CONSOLA
  FROM
    CONSOLA;
  IF COUNT_CONSOLA = 0 THEN
    RAISE_APPLICATION_ERROR (-20004, 'Tabela CONSOLA e goala.');
  END IF;
 -- verificam daca tabela DEZVOLTA e goala
  SELECT
    COUNT (*) INTO COUNT_DEZVOLTA
  FROM
    DEZVOLTA;
  IF COUNT_DEZVOLTA = 0 THEN
    RAISE_APPLICATION_ERROR (-20005, 'Tabela DEZVOLTA e goala.');
  END IF;
 -- verificam daca tabela CONSTRUIESTE e goala
  SELECT
    COUNT (*) INTO COUNT_CONSTRUIESTE
  FROM
    CONSTRUIESTE;
  IF COUNT_CONSTRUIESTE = 0 THEN
    RAISE_APPLICATION_ERROR (-20006, 'Tabela CONSTRUIESTE e goala.');
  END IF;
 -- verificam daca compania de jocuri exista
  SELECT
    COUNT (*) INTO COUNT_COMPANIE_CURENTA
  FROM
    COMPANIE_JOC
  WHERE
    ID_COMPANIE_JOC = COMPANIE_ID;
  IF COUNT_COMPANIE_CURENTA = 0 THEN
    RAISE_APPLICATION_ERROR (-20007, 'Nu exista companie de jocuri cu acest ID.');
  END IF;
 -- selectam jocurile care apartin de compania specificata
  SELECT
    * BULK COLLECT INTO JOCURI
  FROM
    JOC
  WHERE
    ID_JOC IN (
      SELECT
        ID_JOC
      FROM
        DEZVOLTA
      WHERE
        ID_COMPANIE_JOC = COMPANIE_ID
    );
 -- verificam daca compania a produs jocuri
  IF JOCURI.COUNT = 0 THEN
    RAISE_APPLICATION_ERROR (-20008, 'Nu au fost create jocuri de aceasta companie.');
  END IF;
 -- selectam consolele care sunt construite de compania specificata
  FOR I IN (
    SELECT
      NUME
    FROM
      CONSOLA
    WHERE
      ID_CONSOLA IN (
        SELECT
          ID_CONSOLA
        FROM
          CONSTRUIESTE
        WHERE
          ID_COMPANIE_CONSOLA = COMPANIE_ID
      )
  ) LOOP
 -- adaugam numele consolei
    CONSOLE.EXTEND;
    CONSOLE (CONSOLE.COUNT) := I.NUME;
  END LOOP;
 -- verificam daca compania a produs console
  IF CONSOLE.COUNT = 0 THEN
    RAISE_APPLICATION_ERROR (-20009, 'Nu au fost produse console de aceasta companie.');
  END IF;
 -- afisam numele jocurilor
  FOR I IN 1..JOCURI.COUNT LOOP
    DBMS_OUTPUT.PUT_LINE ('Joc: ' || JOCURI (I) .NUME);
  END LOOP;
 -- afisam numele consolelor
  FOR I IN 1..CONSOLE.COUNT LOOP
    DBMS_OUTPUT.PUT_LINE ('Consola: ' || CONSOLE (I) );
  END LOOP;
 -- tratam alte exceptii
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE ('A aparut o eroare neasteptata: ' || SQLERRM);
END;
/

-- apelam subprogramul
BEGIN
  AFISARE_JOCURI_SI_CONSOLE;
END;
/

-- -- --

Exercițiul 7:
Cerință: Obține o listă cu toate jocurile lansate într-un anumit an și o listă cu toate consolele lansate în același an. Utilizează un cursor pentru jocuri și un cursor parametrizat pentru console.
CREATE OR REPLACE PROCEDURE AFISARE_JOCURI_SI_CONSOLE2 IS
 -- declaram variabila AN_LANSARE si initializam cu data '2003'
  AN_LANSARE   DATE := TO_DATE ('2003', 'YYYY');
 -- declaram cursorul C_JOCURI pentru a selecta numele jocurilor
  CURSOR C_JOCURI IS
    SELECT
      NUME
    FROM
      JOC
    WHERE
      DATA_LANSARE BETWEEN AN_LANSARE AND AN_LANSARE + INTERVAL '1' YEAR;
 -- declaram cursorul C_CONSOLE pentru a selecta numele consolelor
  CURSOR C_CONSOLE (AN_LANSARE DATE) IS
    SELECT
      NUME
    FROM
      CONSOLA
    WHERE
      DATA_LANSARE BETWEEN AN_LANSARE AND AN_LANSARE + INTERVAL '1' YEAR;
 -- declaram variabilele NUME_JOC si NUME_CONSOLA pentru a stoca numele jocurilor si consolelor
  NUME_JOC     JOC.NUME%TYPE;
  NUME_CONSOLA CONSOLA.NUME%TYPE;
  RECORD_FOUND BOOLEAN;
BEGIN
 -- parcurgem rezultatele cursorului C_JOCURI si afisam numele jocurilor
  OPEN C_JOCURI;
  RECORD_FOUND := FALSE;
  LOOP
    FETCH C_JOCURI INTO NUME_JOC;
    EXIT WHEN C_JOCURI%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE ('Joc: ' || NUME_JOC);
    RECORD_FOUND := TRUE;
  END LOOP;
  CLOSE C_JOCURI;
 -- exceptie daca nu a gasit joc lansat in anul precizat
  IF NOT RECORD_FOUND THEN
    RAISE_APPLICATION_ERROR (-20001, 'Nu au fost lansate jocuri in acest an.');
  END IF;
 -- parcurgem rezultatele cursorului C_CONSOLE si afisam numele consolelor
  OPEN C_CONSOLE (AN_LANSARE);
  RECORD_FOUND := FALSE;
  LOOP
    FETCH C_CONSOLE INTO NUME_CONSOLA;
    EXIT WHEN C_CONSOLE%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE ('Consola: ' || NUME_CONSOLA);
    RECORD_FOUND := TRUE;
  END LOOP;
  CLOSE C_CONSOLE;
 -- exceptie daca nu a gasit consola fabricata in anul precizat
  IF NOT RECORD_FOUND THEN
    RAISE_APPLICATION_ERROR (-20002, 'Nu au fost lansate console in acest an.');
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE ('A aparut o eroare neasteptata: ' || SQLERRM);
END;
/

-- apelam subprogramul
BEGIN
  AFISARE_JOCURI_SI_CONSOLE2;
END;
/

-- -- --

Exercițiul 8:
Cerință: Obține numărul de jocuri dezvoltate de o companie într-un anumit an. Definește o funcție care să includă următoarele două excepții: una pentru cazul în care compania nu există și una pentru cazul în care compania nu a dezvoltat niciun joc în acel an.
CREATE OR REPLACE FUNCTION GASESTE_NR_JOCURI (
  COMPANIE_ID IN NUMBER,
  AN_LANSARE IN DATE
) RETURN NUMBER IS
  NR_JOCURI            NUMBER;
  COMPANIE_COUNT       NUMBER;
  COMPANIE_NEEXISTENTA EXCEPTION;
  NICIUN_JOC EXCEPTION;
BEGIN
 -- verificam daca compania exista
  SELECT
    COUNT (*) INTO COMPANIE_COUNT
  FROM
    DEZVOLTA
  WHERE
    ID_COMPANIE_JOC = COMPANIE_ID;
  IF COMPANIE_COUNT = 0 THEN
    RAISE COMPANIE_NEEXISTENTA;
  END IF;
 -- selectam numarul de jocuri dezvoltate de companie in anul specificat
  SELECT
    COUNT (*) INTO NR_JOCURI
  FROM
    JOC
  WHERE
    ID_JOC IN (
      SELECT
        ID_JOC
      FROM
        DEZVOLTA
      WHERE
        ID_COMPANIE_JOC = COMPANIE_ID
    )
    AND DATA_LANSARE BETWEEN AN_LANSARE AND AN_LANSARE + INTERVAL '1' YEAR;
 -- verificam daca exista compania sau daca nu a dezvoltat niciun joc in acest an
  IF NR_JOCURI = 0 THEN
    RAISE NICIUN_JOC;
  END IF;
 -- returnam numarul de jocuri
  RETURN NR_JOCURI;
EXCEPTION
  WHEN COMPANIE_NEEXISTENTA THEN
    DBMS_OUTPUT.PUT_LINE ('Compania nu exista.');
    RETURN NULL;
  WHEN NICIUN_JOC THEN
    DBMS_OUTPUT.PUT_LINE ('Compania nu a dezvoltat niciun joc in acest an.');
    RETURN 0;
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE ('A aparut o eroare: ' || SQLERRM);
    RETURN NULL;
END;
/

-- apelam functia GASESTE_NR_JOCURI
DECLARE
  NR_JOCURI NUMBER;
BEGIN
  NR_JOCURI := GASESTE_NR_JOCURI (21, TO_DATE ('1999', 'YYYY') );
  DBMS_OUTPUT.PUT_LINE ('Numar jocuri: ' || NR_JOCURI);
END;
/

-- -- --

Exercițiul 9:
Cerință: Obține o listă cu toate jocurile dezvoltate de o companie, care rulează pe o anumită consolă și sunt interpretate de un anumit emulator. Utilizează o procedură care se folosește de 5 tabele: JOC, DEZVOLTA, RULEAZA, INTERPRETEAZA și EMULATOR.
CREATE OR REPLACE PROCEDURE AFISEAZA_JOCURI (
  COMPANIE_ID IN NUMBER,
  CONSOLA_ID IN NUMBER,
  EMULATOR_ID IN NUMBER
) IS
 -- defineste exceptiile personalizate
  E_ID_JOC_NEEXISTENT EXCEPTION;
  E_ID_COMPANY_NEEXISTENT EXCEPTION;
  E_ID_CONSOLA_NEEXISTENT EXCEPTION;
  E_ID_EMULATOR_NEEXISTENT EXCEPTION;
 -- variabile locale pentru verificari
  V_COMPANY_ID             NUMBER;
  V_CONSOLA_ID             NUMBER;
  V_EMULATOR_ID            NUMBER;
  CURSOR C_JOCURI IS
    SELECT
      J.NUME
    FROM
      JOC           J
      JOIN DEZVOLTA D
      ON J.ID_JOC = D.ID_JOC JOIN RULEAZA R
      ON J.ID_JOC = R.ID_JOC
      JOIN INTERPRETEAZA I
      ON J.ID_JOC = I.ID_JOC JOIN EMULATOR E
      ON I.ID_EMULATOR = E.ID_EMULATOR
    WHERE
      D.ID_COMPANIE_JOC = COMPANIE_ID
      AND R.ID_CONSOLA = CONSOLA_ID
      AND E.ID_EMULATOR = EMULATOR_ID;
  NUME_JOC                 JOC.NUME%TYPE;
  V_TOO_MANY_ROWS          BOOLEAN;
BEGIN
 -- verificarea existentei inregistrarii COMPANIE_ID
  BEGIN
    SELECT
      1 INTO V_COMPANY_ID
    FROM
      DEZVOLTA
    WHERE
      ID_COMPANIE_JOC = COMPANIE_ID;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE E_ID_COMPANY_NEEXISTENT;
  END;
 -- verificarea existentei inregistrarii CONSOLA_ID
  BEGIN
    SELECT
      1 INTO V_CONSOLA_ID
    FROM
      RULEAZA
    WHERE
      ID_CONSOLA = CONSOLA_ID;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE E_ID_CONSOLA_NEEXISTENT;
  END;
 -- verificarea existentei inregistrarii EMULATOR_ID
  BEGIN
    SELECT
      1 INTO V_EMULATOR_ID
    FROM
      EMULATOR
    WHERE
      ID_EMULATOR = EMULATOR_ID;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE E_ID_EMULATOR_NEEXISTENT;
  END;
 -- parcurge cursorul si afiseaza jocurile
  V_TOO_MANY_ROWS := FALSE;
  OPEN C_JOCURI;
  LOOP
    FETCH C_JOCURI INTO NUME_JOC;
    EXIT WHEN C_JOCURI%NOTFOUND;
    IF V_TOO_MANY_ROWS THEN
      RAISE TOO_MANY_ROWS;
    ELSE
      DBMS_OUTPUT.PUT_LINE ('Joc: ' || NUME_JOC);
    END IF;
    V_TOO_MANY_ROWS := TRUE;
  END LOOP;
  IF NOT V_TOO_MANY_ROWS THEN
    RAISE NO_DATA_FOUND;
  END IF;
  CLOSE C_JOCURI;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE ('Nu exista niciun joc care sa indeplineasca criteriile.');
  WHEN TOO_MANY_ROWS THEN
    DBMS_OUTPUT.PUT_LINE ('Prea multe jocuri indeplinesc criteriile.');
  WHEN E_ID_COMPANY_NEEXISTENT THEN
    DBMS_OUTPUT.PUT_LINE ('Nu a fost gasita o companie cu id-ul precizat.');
  WHEN E_ID_CONSOLA_NEEXISTENT THEN
    DBMS_OUTPUT.PUT_LINE ('Nu a fost gasita o consola cu id-ul precizat.');
  WHEN E_ID_EMULATOR_NEEXISTENT THEN
    DBMS_OUTPUT.PUT_LINE ('Nu a fost gasit un emulator cu id-ul precizat.');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE ('A aparut o eroare: ' || SQLERRM);
END;
/

BEGIN
  AFISEAZA_JOCURI (1, 1, 51);
END;
/

-- -- --

Exercițiul 10:
Cerință: Interzice adăugarea de jocuri video cu data mai mică decât 1 ianuarie 1970.
CREATE OR REPLACE TRIGGER TRG_LMD_COMMAND BEFORE
  INSERT ON JOC
DECLARE
BEGIN
  FOR GAME IN (
    SELECT
      *
    FROM
      JOC
    WHERE
      DATA_LANSARE < TO_DATE ('1970-01-01', 'YYYY-MM-DD')
  ) LOOP
    RAISE_APPLICATION_ERROR (-20001, 'Nu poate fi inserat jocul cu acest ID '
      || GAME.ID_JOC
      || '. Data de lansare trebuie sa fie dupa 1 ianuarie 1970.');
  END LOOP;
END;
/

-- -- --

Exercițiul 11:
Cerință: Actualizează automat tabela PROGRAMEAZA, adăugând dezvoltatorul de emulatoare care are id-ul 1 în momentul în care un emulator nou este pus în baza de date.
CREATE SEQUENCE programeaza_seq START WITH 11 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TRG_LMD_ROW AFTER
INSERT ON EMULATOR FOR EACH ROW
BEGIN
  INSERT INTO PROGRAMEAZA (
    ID,
    ID_DEZVOLTATOR_EMULATOR,
    ID_EMULATOR
  ) VALUES (
    programeaza_seq.NEXTVAL,
    1, 
    :NEW.ID_EMULATOR
  );
END;
/

-- -- --

Exercițiul 12:
Cerință: Blochează inserarea în tabelul DEZVOLTATOR_EMULATOR dacă are mai mult de 12 rânduri.
CREATE OR REPLACE TRIGGER TRG_LDD BEFORE
  INSERT ON DEZVOLTATOR_EMULATOR
DECLARE
  V_ROW_COUNT  INTEGER;
BEGIN
  SELECT COUNT(*) INTO V_ROW_COUNT FROM DEZVOLTATOR_EMULATOR;
  IF V_ROW_COUNT >= 12 THEN
    RAISE_APPLICATION_ERROR (-20002, 'Nu mai pot fi inserate linii in DEZVOLTATOR_EMULATOR. Limita maxima de linii a fost atinsa.');
  END IF;
END;
/